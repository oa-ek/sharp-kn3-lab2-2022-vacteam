// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vacancy.Core;

#nullable disable

namespace Vacancy.Core.Migrations
{
    [DbContext(typeof(VacancyDbContext))]
    [Migration("20221109163715_Fefsg")]
    partial class Fefsg
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b5df0da3-0e9a-48cb-a0e0-0784b1c8df22",
                            ConcurrencyStamp = "7abb5cd8-4731-44b2-a4a3-30311ffbe0a1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "47405d77-dd20-41b2-bcfa-1f344c8adb80",
                            ConcurrencyStamp = "f08567c1-2309-4e22-96f8-09f5d0b58651",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "352e0305-43d5-4672-9495-ca2d1e86b5e2",
                            ConcurrencyStamp = "a68a092e-5a09-4030-8cdd-c5d935f758f3",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "566d2d1d-de5a-4cb9-8bff-fdcc2fcc62c9",
                            RoleId = "b5df0da3-0e9a-48cb-a0e0-0784b1c8df22"
                        },
                        new
                        {
                            UserId = "566d2d1d-de5a-4cb9-8bff-fdcc2fcc62c9",
                            RoleId = "47405d77-dd20-41b2-bcfa-1f344c8adb80"
                        },
                        new
                        {
                            UserId = "566d2d1d-de5a-4cb9-8bff-fdcc2fcc62c9",
                            RoleId = "352e0305-43d5-4672-9495-ca2d1e86b5e2"
                        },
                        new
                        {
                            UserId = "ded6a91c-1ea8-49a3-a270-fa138ef4075b",
                            RoleId = "47405d77-dd20-41b2-bcfa-1f344c8adb80"
                        },
                        new
                        {
                            UserId = "ded6a91c-1ea8-49a3-a270-fa138ef4075b",
                            RoleId = "352e0305-43d5-4672-9495-ca2d1e86b5e2"
                        },
                        new
                        {
                            UserId = "da38ab52-7212-4280-96f7-d655ea63cb73",
                            RoleId = "352e0305-43d5-4672-9495-ca2d1e86b5e2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Vacancy.Core.Aboutvacancie", b =>
                {
                    b.Property<int>("AboutvacancieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AboutvacancieId"), 1L, 1);

                    b.Property<string>("AboutvacancieName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AboutvacancieId");

                    b.ToTable("Aboutvacancies");
                });

            modelBuilder.Entity("Vacancy.Core.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FieldactivityId")
                        .HasColumnType("int");

                    b.Property<int>("InformationId")
                        .HasColumnType("int");

                    b.Property<int>("LogotypeId")
                        .HasColumnType("int");

                    b.HasKey("CompanyId");

                    b.HasIndex("FieldactivityId");

                    b.HasIndex("InformationId");

                    b.HasIndex("LogotypeId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Vacancy.Core.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationId"), 1L, 1);

                    b.Property<string>("EducationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducationId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            EducationId = 1,
                            EducationName = "Тут ви маєте розмістити свої данні про освіту, коли ви її отримали та по якій спеціальності"
                        });
                });

            modelBuilder.Entity("Vacancy.Core.Employer", b =>
                {
                    b.Property<int>("EmployerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployerId"), 1L, 1);

                    b.Property<string>("EmployerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployerId");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("Vacancy.Core.Experience", b =>
                {
                    b.Property<int>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperienceId"), 1L, 1);

                    b.Property<string>("ExperienceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExperienceId");

                    b.ToTable("Experiences");

                    b.HasData(
                        new
                        {
                            ExperienceId = 1,
                            ExperienceName = "Тут ви можете вказати чи є у вас досвід роботи та за бажанням описати чим ви займались раніше"
                        });
                });

            modelBuilder.Entity("Vacancy.Core.Fieldactivity", b =>
                {
                    b.Property<int>("FieldactivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldactivityId"), 1L, 1);

                    b.Property<string>("FieldactivityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FieldactivityId");

                    b.ToTable("Fieldactivities");
                });

            modelBuilder.Entity("Vacancy.Core.Information", b =>
                {
                    b.Property<int>("InformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InformationId"), 1L, 1);

                    b.Property<string>("InformationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InformationId");

                    b.ToTable("Informations");
                });

            modelBuilder.Entity("Vacancy.Core.Logotype", b =>
                {
                    b.Property<int>("LogotypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogotypeId"), 1L, 1);

                    b.Property<string>("LogotypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogotypeId");

                    b.ToTable("Logotypes");
                });

            modelBuilder.Entity("Vacancy.Core.Requirement", b =>
                {
                    b.Property<int>("RequirementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequirementId"), 1L, 1);

                    b.Property<string>("RequirementName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequirementId");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("Vacancy.Core.Resume", b =>
                {
                    b.Property<int>("ResumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResumeId"), 1L, 1);

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ResumeId");

                    b.HasIndex("EducationId");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("Vacancy.Core.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"), 1L, 1);

                    b.Property<string>("SkillName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            SkillId = 1,
                            SkillName = "Тут ви можете вказати свої вміння яких ви навчились протягом деякого часу"
                        });
                });

            modelBuilder.Entity("Vacancy.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "566d2d1d-de5a-4cb9-8bff-fdcc2fcc62c9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "449230c4-fa88-4c70-b55f-a41a89264114",
                            Email = "admin@vacancy.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@VACANCY.COM",
                            NormalizedUserName = "ADMIN@VACANCY.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIqxlUKEfFm/ZAdbmA89z9EH9Y2bKqQOzBrATielpxnDTzi2DTxcrYliYqA+dXxFyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15366726-f00f-461f-b7e9-1676260658c4",
                            TwoFactorEnabled = false,
                            UserName = "admin@vacancy.com"
                        },
                        new
                        {
                            Id = "ded6a91c-1ea8-49a3-a270-fa138ef4075b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98dbebc8-f4b9-49a8-9e13-30f9e5ddf253",
                            Email = "moder@vacancy.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODER@VACANCY.COM",
                            NormalizedUserName = "MODER@VACANCY.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOLswwkZgswtRbLEAdYWPZfe5Tl6kOvjyGR5nwZAaIASjjqDIX6lWz5pBvk0HLJF8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2cd6cae2-3fba-4b1a-9903-0786c2e294c2",
                            TwoFactorEnabled = false,
                            UserName = "moder@vacancy.com"
                        },
                        new
                        {
                            Id = "da38ab52-7212-4280-96f7-d655ea63cb73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24740dd8-c355-4fb6-80e1-2c3c49c6e87c",
                            Email = "user@vacancy.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@VACANCY.COM",
                            NormalizedUserName = "USER@VACANCY.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECBsON8LENCMjDx9jrnDydkw7nKmHhxv4QKwnfXnXKLCtZJgNBofj+2oB2PykapBdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0b3b2a7-2005-4538-bed8-16719296d798",
                            TwoFactorEnabled = false,
                            UserName = "user@vacancy.com"
                        });
                });

            modelBuilder.Entity("Vacancy.Core.Vacancie", b =>
                {
                    b.Property<int>("VacancieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VacancieId"), 1L, 1);

                    b.Property<int>("AboutvacancieId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("VacancieId");

                    b.HasIndex("AboutvacancieId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("RequirementId");

                    b.HasIndex("UserId");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Vacancy.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Vacancy.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vacancy.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Vacancy.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vacancy.Core.Company", b =>
                {
                    b.HasOne("Vacancy.Core.Fieldactivity", "Fieldactivity")
                        .WithMany("Companies")
                        .HasForeignKey("FieldactivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vacancy.Core.Information", "Information")
                        .WithMany("Companies")
                        .HasForeignKey("InformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vacancy.Core.Logotype", "Logotype")
                        .WithMany("Companies")
                        .HasForeignKey("LogotypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fieldactivity");

                    b.Navigation("Information");

                    b.Navigation("Logotype");
                });

            modelBuilder.Entity("Vacancy.Core.Resume", b =>
                {
                    b.HasOne("Vacancy.Core.Education", "Education")
                        .WithMany("Resume")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vacancy.Core.Experience", "Experience")
                        .WithMany("Resume")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vacancy.Core.Skill", "Skill")
                        .WithMany("Resume")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vacancy.Core.User", "User")
                        .WithMany("Resume")
                        .HasForeignKey("UserId");

                    b.Navigation("Education");

                    b.Navigation("Experience");

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vacancy.Core.Vacancie", b =>
                {
                    b.HasOne("Vacancy.Core.Aboutvacancie", "Aboutvacancie")
                        .WithMany("Vacancie")
                        .HasForeignKey("AboutvacancieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vacancy.Core.Company", "Company")
                        .WithMany("Vacancie")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vacancy.Core.Employer", "Employer")
                        .WithMany("Vacancie")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vacancy.Core.Requirement", "Requirement")
                        .WithMany("Vacancie")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vacancy.Core.User", "User")
                        .WithMany("Vacancie")
                        .HasForeignKey("UserId");

                    b.Navigation("Aboutvacancie");

                    b.Navigation("Company");

                    b.Navigation("Employer");

                    b.Navigation("Requirement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vacancy.Core.Aboutvacancie", b =>
                {
                    b.Navigation("Vacancie");
                });

            modelBuilder.Entity("Vacancy.Core.Company", b =>
                {
                    b.Navigation("Vacancie");
                });

            modelBuilder.Entity("Vacancy.Core.Education", b =>
                {
                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Vacancy.Core.Employer", b =>
                {
                    b.Navigation("Vacancie");
                });

            modelBuilder.Entity("Vacancy.Core.Experience", b =>
                {
                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Vacancy.Core.Fieldactivity", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Vacancy.Core.Information", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Vacancy.Core.Logotype", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Vacancy.Core.Requirement", b =>
                {
                    b.Navigation("Vacancie");
                });

            modelBuilder.Entity("Vacancy.Core.Skill", b =>
                {
                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Vacancy.Core.User", b =>
                {
                    b.Navigation("Resume");

                    b.Navigation("Vacancie");
                });
#pragma warning restore 612, 618
        }
    }
}
